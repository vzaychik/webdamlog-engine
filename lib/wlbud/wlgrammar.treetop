####License####
 #  File name wlgrammar.treetop
 #  Copyright Â© by INRIA
 #
 #  Contributors : Webdam Team <webdam.inria.fr>
 #       Jules Testard <jules[dot]testard[@]mail[dot]mcgill[dot]ca>
 #       Emilien Antoine <emilien[dot]antoine[@]inria[dot]fr>
 #
 #   WebdamLog - 30 juin 2011
 #
 #   Encoding - UTF-8
####License####

module WLBud

    # This WebdamLogGrammar is strongly linked with the wlvocabulary class that
    # takes the name generated here to define supplementary methods.
    grammar WebdamLogGrammar

      ### Root program ###
      #### Each line is either a comment or it describe either a peer a fact a collection or a rule
      rule root
        sep instruction:(fact / collection / rul / peer_dec / comment / policy) sep ';' sep <WLVocabulary>
      end

      ### Optional separator
      rule sep
        msep?
      end
      ### Mandatory separator
      rule msep
        (white / comment)+
      end
        rule white
          [ \t\n\r]+
        end
        ### Comment ###
        rule comment
          comment_to_eol <WLComment>
          /
          comment_c_style <WLComment>
        end
        rule comment_to_eol
          '//' (!"\n" .)+
          /
          '#' (!"\n" .)+
        end
        rule comment_c_style
            '/*' (!'*/' . )* '*/'
        end

        ### The generic filter for words ###
        rule word
          '_'* char_in_word ( char_in_word / '_')* <WLWord>
        end
        rule char_in_word
          [a-zA-Z0-9!?.-]
        end

      ### Type of entry (peername, fact, collection or rul) ###
      #
        #### peername extended with WLPeerDec module
        rule peer_dec
          'peer ' sep peer_name sep '=' sep peer_address <WLPeerDec>
        end
        
        #### fact extended with WLFact module
        rule fact
          'fact ' sep relation_name ('@'/'_at_') peer_name '(' sep items sep ')' <WLFact>
        end
        
        #### collection extended with WLCollection module
        rule collection
          'collection ' sep rel_type:relation_type
          sep relation_name ('@'/'_at_') peer_name  sep '(' sep col_fields sep ')' <WLCollection>
        end
        rule relation_type
          extensional / intermediary / intensional 
        end
        rule extensional
          ('extensional ' / 'ext ') persistent:(sep persistent)? <WLExtensional>
        end        
        rule intermediary
          ('intermediary ' / 'inter ') persistent:(sep persistent)? <WLIntermediary>
        end
        rule intensional
          'intensional ' <WLIntensional>
          /
          'int ' <WLIntensional>
        end
        rule persistent
           'persistent'
           /
           'per'
        end

        #### rule extended with WLRule module
        rule rul
          'rule ' sep atom sep ':-' sep atoms <WLRule>
        end
        
        rule atoms         
            first_atom:atom list_atoms:( sep ',' sep other_atom:atom )* {
                def get_atoms
                  [first_atom] + list_atoms
                end
                # remove the comma and return an array of atoms
                def list_atoms
                  super.elements.map{ |comma_and_atom| comma_and_atom.other_atom }
                end
             }
        end


      ### for peer ###
        ### define peer ###
        rule peer_name
          word
        end
        rule peer_address
          (ip ':' port)
        end
        ### Rules for type of item ###
        rule ip
          word
        end
        rule port
          [0-9]1..6
        end
      ### for fact ###
        #### relation name ####
        rule relation_name
            word
        end

        
        #### fields for collection declaration ####
        rule col_fields
          ( keys values / '' ) <WLFields>
        end
            # value+ for key fields in relations
            rule keys
              ( key sep )+
            end
            #value* for non-key fields in relations
            rule values
              ( value sep )*
            end
                rule key
                  item '*' sep ',' / item '*'
                end
                rule value
                  item (!'*') sep ',' / item (!'*')
                end

        rule items
            sep first_item:item list_items:( sep ',' sep other_item:item sep )* {
                def get_items
                  [first_item] + list_items
                end
                # remove the comma and return an array of items
                def list_items
                  super.elements.map{ |comma_and_item| comma_and_item.other_item }
                end
             }
        end
        rule item
          ( word / ('"' complex_string '"') ) <WLItem>
        end
        # Match anything but a unescaped quote
        rule complex_string
            ('\"' / !'"' .)* <WLComplexString>
        end
            
      ### for rules ###
        #### atom in rules ####
        rule atom
          rproven:provenance? sep rrelation ('@'/'_at_') rpeer sep '(' sep rfields sep ')' sep ']'? <WLAtom>
        end
          ###### relation name in atom #####
	  rule provenance
	    hide / preserve
	  end
	  rule hide
	    '[HIDE ' <WLProvHide>
	  end
	  rule preserve
	    '[PRESERVE ' <WLProvPreserve>
	  end
          rule rrelation
            ( relation_name / variable ) <WLRRelation>
          end
          ###### peer name in atom #####
          rule rpeer
            ( peer_name / variable ) <WLRPeer>
          end
          ###### attributes name in atom #####
          rule rfields
            sep first_rtoken:rtoken list_rtokens:( sep ',' sep other_rtoken:rtoken sep )* <WLRfields>
          end
            ####### attributes name in atom ######
            rule rtoken
              (variable / item) <WLRToken>
            end
            
    rule variable
        ( '$' word / '$_' ) <WLVar>
    end

    rule policy
    	'policy ' sep relation_name sep ractype:access_type sep access <WLPolicy>
    end
        rule access_type
    	    read / write / grant
   	end
    	rule read
            'Read ' / 'read ' <WLRead>
	end
    	rule write
            'Write ' / 'write ' <WLWrite>
        end
    	rule grant
            'Grant ' / 'grant ' <WLGrant>
        end
    	rule access
             (relation_name ('@'/'_at_') peer_name / 'ALL' / peer_name) <WLAccess>
        end

   end # grammar WebdamLogGrammar
end # module WLBud